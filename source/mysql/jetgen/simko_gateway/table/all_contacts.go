//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AllContacts = newAllContactsTable("simko_gateway", "all_contacts", "")

type allContactsTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	Sender mysql.ColumnString
	Number mysql.ColumnString
	Name   mysql.ColumnString
	Type   mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AllContactsTable struct {
	allContactsTable

	NEW allContactsTable
}

// AS creates new AllContactsTable with assigned alias
func (a AllContactsTable) AS(alias string) *AllContactsTable {
	return newAllContactsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AllContactsTable with assigned schema name
func (a AllContactsTable) FromSchema(schemaName string) *AllContactsTable {
	return newAllContactsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AllContactsTable with assigned table prefix
func (a AllContactsTable) WithPrefix(prefix string) *AllContactsTable {
	return newAllContactsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AllContactsTable with assigned table suffix
func (a AllContactsTable) WithSuffix(suffix string) *AllContactsTable {
	return newAllContactsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAllContactsTable(schemaName, tableName, alias string) *AllContactsTable {
	return &AllContactsTable{
		allContactsTable: newAllContactsTableImpl(schemaName, tableName, alias),
		NEW:              newAllContactsTableImpl("", "new", ""),
	}
}

func newAllContactsTableImpl(schemaName, tableName, alias string) allContactsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		SenderColumn   = mysql.StringColumn("sender")
		NumberColumn   = mysql.StringColumn("number")
		NameColumn     = mysql.StringColumn("name")
		TypeColumn     = mysql.StringColumn("type")
		allColumns     = mysql.ColumnList{IDColumn, SenderColumn, NumberColumn, NameColumn, TypeColumn}
		mutableColumns = mysql.ColumnList{SenderColumn, NumberColumn, NameColumn, TypeColumn}
	)

	return allContactsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Sender: SenderColumn,
		Number: NumberColumn,
		Name:   NameColumn,
		Type:   TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
