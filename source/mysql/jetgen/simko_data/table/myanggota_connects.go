//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var MyanggotaConnects = newMyanggotaConnectsTable("simko_data", "myanggota_connects", "")

type myanggotaConnectsTable struct {
	mysql.Table

	// Columns
	ConnectID          mysql.ColumnString
	Phone              mysql.ColumnString
	Challenge          mysql.ColumnString
	ChallengeSuccessAt mysql.ColumnTimestamp
	UpdatedAt          mysql.ColumnTimestamp
	CreatedAt          mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type MyanggotaConnectsTable struct {
	myanggotaConnectsTable

	NEW myanggotaConnectsTable
}

// AS creates new MyanggotaConnectsTable with assigned alias
func (a MyanggotaConnectsTable) AS(alias string) *MyanggotaConnectsTable {
	return newMyanggotaConnectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MyanggotaConnectsTable with assigned schema name
func (a MyanggotaConnectsTable) FromSchema(schemaName string) *MyanggotaConnectsTable {
	return newMyanggotaConnectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MyanggotaConnectsTable with assigned table prefix
func (a MyanggotaConnectsTable) WithPrefix(prefix string) *MyanggotaConnectsTable {
	return newMyanggotaConnectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MyanggotaConnectsTable with assigned table suffix
func (a MyanggotaConnectsTable) WithSuffix(suffix string) *MyanggotaConnectsTable {
	return newMyanggotaConnectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMyanggotaConnectsTable(schemaName, tableName, alias string) *MyanggotaConnectsTable {
	return &MyanggotaConnectsTable{
		myanggotaConnectsTable: newMyanggotaConnectsTableImpl(schemaName, tableName, alias),
		NEW:                    newMyanggotaConnectsTableImpl("", "new", ""),
	}
}

func newMyanggotaConnectsTableImpl(schemaName, tableName, alias string) myanggotaConnectsTable {
	var (
		ConnectIDColumn          = mysql.StringColumn("connect_id")
		PhoneColumn              = mysql.StringColumn("phone")
		ChallengeColumn          = mysql.StringColumn("challenge")
		ChallengeSuccessAtColumn = mysql.TimestampColumn("challenge_success_at")
		UpdatedAtColumn          = mysql.TimestampColumn("updated_at")
		CreatedAtColumn          = mysql.TimestampColumn("created_at")
		allColumns               = mysql.ColumnList{ConnectIDColumn, PhoneColumn, ChallengeColumn, ChallengeSuccessAtColumn, UpdatedAtColumn, CreatedAtColumn}
		mutableColumns           = mysql.ColumnList{PhoneColumn, ChallengeColumn, ChallengeSuccessAtColumn, UpdatedAtColumn, CreatedAtColumn}
	)

	return myanggotaConnectsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConnectID:          ConnectIDColumn,
		Phone:              PhoneColumn,
		Challenge:          ChallengeColumn,
		ChallengeSuccessAt: ChallengeSuccessAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		CreatedAt:          CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
