//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SimkoChecking = newSimkoCheckingTable("simko_data", "simko_checking", "")

type simkoCheckingTable struct {
	mysql.Table

	// Columns
	KodeNasabah    mysql.ColumnString
	KodeLembaga    mysql.ColumnString
	NasabahID      mysql.ColumnString
	NamaNasabah    mysql.ColumnString
	AlamatNasabah  mysql.ColumnString
	NoHp           mysql.ColumnString
	JenisIdentitas mysql.ColumnString
	NoIdentitas    mysql.ColumnString
	KodeCabang     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SimkoCheckingTable struct {
	simkoCheckingTable

	NEW simkoCheckingTable
}

// AS creates new SimkoCheckingTable with assigned alias
func (a SimkoCheckingTable) AS(alias string) *SimkoCheckingTable {
	return newSimkoCheckingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SimkoCheckingTable with assigned schema name
func (a SimkoCheckingTable) FromSchema(schemaName string) *SimkoCheckingTable {
	return newSimkoCheckingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SimkoCheckingTable with assigned table prefix
func (a SimkoCheckingTable) WithPrefix(prefix string) *SimkoCheckingTable {
	return newSimkoCheckingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SimkoCheckingTable with assigned table suffix
func (a SimkoCheckingTable) WithSuffix(suffix string) *SimkoCheckingTable {
	return newSimkoCheckingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSimkoCheckingTable(schemaName, tableName, alias string) *SimkoCheckingTable {
	return &SimkoCheckingTable{
		simkoCheckingTable: newSimkoCheckingTableImpl(schemaName, tableName, alias),
		NEW:                newSimkoCheckingTableImpl("", "new", ""),
	}
}

func newSimkoCheckingTableImpl(schemaName, tableName, alias string) simkoCheckingTable {
	var (
		KodeNasabahColumn    = mysql.StringColumn("kode_nasabah")
		KodeLembagaColumn    = mysql.StringColumn("kode_lembaga")
		NasabahIDColumn      = mysql.StringColumn("nasabah_id")
		NamaNasabahColumn    = mysql.StringColumn("nama_nasabah")
		AlamatNasabahColumn  = mysql.StringColumn("alamat_nasabah")
		NoHpColumn           = mysql.StringColumn("no_hp")
		JenisIdentitasColumn = mysql.StringColumn("jenis_identitas")
		NoIdentitasColumn    = mysql.StringColumn("no_identitas")
		KodeCabangColumn     = mysql.StringColumn("kode_cabang")
		allColumns           = mysql.ColumnList{KodeNasabahColumn, KodeLembagaColumn, NasabahIDColumn, NamaNasabahColumn, AlamatNasabahColumn, NoHpColumn, JenisIdentitasColumn, NoIdentitasColumn, KodeCabangColumn}
		mutableColumns       = mysql.ColumnList{KodeLembagaColumn, NasabahIDColumn, NamaNasabahColumn, AlamatNasabahColumn, NoHpColumn, JenisIdentitasColumn, NoIdentitasColumn, KodeCabangColumn}
	)

	return simkoCheckingTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		KodeNasabah:    KodeNasabahColumn,
		KodeLembaga:    KodeLembagaColumn,
		NasabahID:      NasabahIDColumn,
		NamaNasabah:    NamaNasabahColumn,
		AlamatNasabah:  AlamatNasabahColumn,
		NoHp:           NoHpColumn,
		JenisIdentitas: JenisIdentitasColumn,
		NoIdentitas:    NoIdentitasColumn,
		KodeCabang:     KodeCabangColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
