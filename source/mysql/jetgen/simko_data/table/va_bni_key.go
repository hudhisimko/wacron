//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var VaBniKey = newVaBniKeyTable("simko_data", "va_bni_key", "")

type vaBniKeyTable struct {
	mysql.Table

	// Columns
	ClientID    mysql.ColumnString
	Prefix      mysql.ColumnString
	SecretKey   mysql.ColumnString
	URLAPI      mysql.ColumnString
	KodeLembaga mysql.ColumnString
	NamaLembaga mysql.ColumnString
	URLLembaga  mysql.ColumnString
	KodeCabRek  mysql.ColumnString
	MinTrx      mysql.ColumnFloat
	KodePerk    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type VaBniKeyTable struct {
	vaBniKeyTable

	NEW vaBniKeyTable
}

// AS creates new VaBniKeyTable with assigned alias
func (a VaBniKeyTable) AS(alias string) *VaBniKeyTable {
	return newVaBniKeyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VaBniKeyTable with assigned schema name
func (a VaBniKeyTable) FromSchema(schemaName string) *VaBniKeyTable {
	return newVaBniKeyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VaBniKeyTable with assigned table prefix
func (a VaBniKeyTable) WithPrefix(prefix string) *VaBniKeyTable {
	return newVaBniKeyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VaBniKeyTable with assigned table suffix
func (a VaBniKeyTable) WithSuffix(suffix string) *VaBniKeyTable {
	return newVaBniKeyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVaBniKeyTable(schemaName, tableName, alias string) *VaBniKeyTable {
	return &VaBniKeyTable{
		vaBniKeyTable: newVaBniKeyTableImpl(schemaName, tableName, alias),
		NEW:           newVaBniKeyTableImpl("", "new", ""),
	}
}

func newVaBniKeyTableImpl(schemaName, tableName, alias string) vaBniKeyTable {
	var (
		ClientIDColumn    = mysql.StringColumn("client_id")
		PrefixColumn      = mysql.StringColumn("prefix")
		SecretKeyColumn   = mysql.StringColumn("secret_key")
		URLAPIColumn      = mysql.StringColumn("url_api")
		KodeLembagaColumn = mysql.StringColumn("kode_lembaga")
		NamaLembagaColumn = mysql.StringColumn("nama_lembaga")
		URLLembagaColumn  = mysql.StringColumn("url_lembaga")
		KodeCabRekColumn  = mysql.StringColumn("kode_cab_rek")
		MinTrxColumn      = mysql.FloatColumn("min_trx")
		KodePerkColumn    = mysql.StringColumn("kode_perk")
		allColumns        = mysql.ColumnList{ClientIDColumn, PrefixColumn, SecretKeyColumn, URLAPIColumn, KodeLembagaColumn, NamaLembagaColumn, URLLembagaColumn, KodeCabRekColumn, MinTrxColumn, KodePerkColumn}
		mutableColumns    = mysql.ColumnList{PrefixColumn, SecretKeyColumn, URLAPIColumn, KodeLembagaColumn, NamaLembagaColumn, URLLembagaColumn, KodeCabRekColumn, MinTrxColumn, KodePerkColumn}
	)

	return vaBniKeyTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClientID:    ClientIDColumn,
		Prefix:      PrefixColumn,
		SecretKey:   SecretKeyColumn,
		URLAPI:      URLAPIColumn,
		KodeLembaga: KodeLembagaColumn,
		NamaLembaga: NamaLembagaColumn,
		URLLembaga:  URLLembagaColumn,
		KodeCabRek:  KodeCabRekColumn,
		MinTrx:      MinTrxColumn,
		KodePerk:    KodePerkColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
