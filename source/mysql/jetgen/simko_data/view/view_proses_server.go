//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ViewProsesServer = newViewProsesServerTable("simko_data", "view_proses_server", "")

type viewProsesServerTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	User         mysql.ColumnString
	Host         mysql.ColumnString
	Db           mysql.ColumnString
	Command      mysql.ColumnString
	Time         mysql.ColumnInteger
	State        mysql.ColumnString
	Info         mysql.ColumnString
	TimeMs       mysql.ColumnFloat
	Stage        mysql.ColumnInteger
	MaxStage     mysql.ColumnInteger
	Progress     mysql.ColumnFloat
	MemoryUsed   mysql.ColumnInteger
	ExaminedRows mysql.ColumnInteger
	QueryID      mysql.ColumnInteger
	InfoBinary   mysql.ColumnString
	Tid          mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ViewProsesServerTable struct {
	viewProsesServerTable

	NEW viewProsesServerTable
}

// AS creates new ViewProsesServerTable with assigned alias
func (a ViewProsesServerTable) AS(alias string) *ViewProsesServerTable {
	return newViewProsesServerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ViewProsesServerTable with assigned schema name
func (a ViewProsesServerTable) FromSchema(schemaName string) *ViewProsesServerTable {
	return newViewProsesServerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ViewProsesServerTable with assigned table prefix
func (a ViewProsesServerTable) WithPrefix(prefix string) *ViewProsesServerTable {
	return newViewProsesServerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ViewProsesServerTable with assigned table suffix
func (a ViewProsesServerTable) WithSuffix(suffix string) *ViewProsesServerTable {
	return newViewProsesServerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newViewProsesServerTable(schemaName, tableName, alias string) *ViewProsesServerTable {
	return &ViewProsesServerTable{
		viewProsesServerTable: newViewProsesServerTableImpl(schemaName, tableName, alias),
		NEW:                   newViewProsesServerTableImpl("", "new", ""),
	}
}

func newViewProsesServerTableImpl(schemaName, tableName, alias string) viewProsesServerTable {
	var (
		IDColumn           = mysql.IntegerColumn("ID")
		UserColumn         = mysql.StringColumn("USER")
		HostColumn         = mysql.StringColumn("HOST")
		DbColumn           = mysql.StringColumn("DB")
		CommandColumn      = mysql.StringColumn("COMMAND")
		TimeColumn         = mysql.IntegerColumn("TIME")
		StateColumn        = mysql.StringColumn("STATE")
		InfoColumn         = mysql.StringColumn("INFO")
		TimeMsColumn       = mysql.FloatColumn("TIME_MS")
		StageColumn        = mysql.IntegerColumn("STAGE")
		MaxStageColumn     = mysql.IntegerColumn("MAX_STAGE")
		ProgressColumn     = mysql.FloatColumn("PROGRESS")
		MemoryUsedColumn   = mysql.IntegerColumn("MEMORY_USED")
		ExaminedRowsColumn = mysql.IntegerColumn("EXAMINED_ROWS")
		QueryIDColumn      = mysql.IntegerColumn("QUERY_ID")
		InfoBinaryColumn   = mysql.StringColumn("INFO_BINARY")
		TidColumn          = mysql.IntegerColumn("TID")
		allColumns         = mysql.ColumnList{IDColumn, UserColumn, HostColumn, DbColumn, CommandColumn, TimeColumn, StateColumn, InfoColumn, TimeMsColumn, StageColumn, MaxStageColumn, ProgressColumn, MemoryUsedColumn, ExaminedRowsColumn, QueryIDColumn, InfoBinaryColumn, TidColumn}
		mutableColumns     = mysql.ColumnList{IDColumn, UserColumn, HostColumn, DbColumn, CommandColumn, TimeColumn, StateColumn, InfoColumn, TimeMsColumn, StageColumn, MaxStageColumn, ProgressColumn, MemoryUsedColumn, ExaminedRowsColumn, QueryIDColumn, InfoBinaryColumn, TidColumn}
	)

	return viewProsesServerTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		User:         UserColumn,
		Host:         HostColumn,
		Db:           DbColumn,
		Command:      CommandColumn,
		Time:         TimeColumn,
		State:        StateColumn,
		Info:         InfoColumn,
		TimeMs:       TimeMsColumn,
		Stage:        StageColumn,
		MaxStage:     MaxStageColumn,
		Progress:     ProgressColumn,
		MemoryUsed:   MemoryUsedColumn,
		ExaminedRows: ExaminedRowsColumn,
		QueryID:      QueryIDColumn,
		InfoBinary:   InfoBinaryColumn,
		Tid:          TidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
